import os
import re
import csv

DATA_DIR = "Add the full file path of your vulnerabiltiy data."
OUTPUT_FILE = "Add a csv output file path including the file name."

def extract_data(file_name, file_path):
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        data = {}
        organization, server_type, environment, os_type, scan_type = extract_file_info(file_name)
        for row in reader:
            if os_type == "Windows":
                matches = [row["Plugin Name"]]
            elif os_type == "OEL" or "OVM" or "OVManager":
                plugin_output = row["Plugin Output"]
                matches = re.findall(r"Should be                : (.*)", plugin_output)
            else:
                matches = [row["Plugin Name"]]
            ip_address = row["IP Address"]
            if ip_address not in data:
                data[ip_address] = set()
            for match in matches:
                data[ip_address].add(match)
        return data

def extract_file_info(file_name):
    file_parts = file_name.split("_")
    organization = file_parts[0]
    server_type = file_parts[1]
    environment = file_parts[2]
    os_type = file_parts[3]
    scan_type = file_parts[4]
    return organization, server_type, environment, os_type, scan_type

def generate_vulns():
    results = {}
    for file_name in os.listdir(DATA_DIR):
        if file_name.endswith(".csv"):
            file_path = os.path.join(DATA_DIR, file_name)
            organization, server_type, environment, os_type, scan_type = extract_file_info(file_name)
            data = extract_data(file_name, file_path)
            for ip_address, patches in data.items():
                if patches:
                    results.setdefault(environment, {}).setdefault(os_type, {}).setdefault(ip_address, set()).update(patches)

    with open(OUTPUT_FILE, mode='w') as f:
        writer = csv.writer(f)
        writer.writerow(['Environment', 'Scan Type', 'IP Address', 'Patches'])
        for env, scan_types in results.items():
            for scan_type, ip_addresses in scan_types.items():
                for ip_address, patches in ip_addresses.items():
                    if not patches:
                        patches = set(['None - No new patches at this time'])
                    elif len(ip_addresses) == 1:
                        patches = list(sorted(patches))
                    elif len(set([tuple(x) for x in ip_addresses.values()])) == 1:
                        patches = list(sorted(ip_addresses[ip_address]))
                    else:
                        patches = list(sorted(patches))
                    writer.writerow([env, scan_type, ip_address, ', '.join(patches)])

def write_output():
    ordered_subgroups = ["Windows", "OEL", "OVManager", "OVM"]
    combined_output = {}
    for file_name in os.listdir(DATA_DIR):
        organization, server_type, environment, os_type, scan_type = extract_file_info(file_name)
        if file_name.endswith('.csv'):
            output = extract_data(file_name, DATA_DIR + file_name)
            if environment not in combined_output:
                combined_output[environment] = {}
            if os_type not in combined_output[environment]:
                combined_output[environment][os_type] = {}
            for ip_address, matches in output.items():
                if ip_address not in combined_output[environment][os_type]:
                    combined_output[environment][os_type][ip_address] = set()
                combined_output[environment][os_type][ip_address].update(matches)

    for environment, subgroup_dict in combined_output.items():
        for scan_type in ordered_subgroups:
            if scan_type in subgroup_dict:
                output = subgroup_dict[scan_type]
                if not output:
                    print(f"\n\n{environment} {scan_type} \nNone - No new patches at this time ")
                else:
                    matches_to_ips = {}
                    for ip_address, matches in output.items():
                        key = tuple(sorted(matches))
                        if key not in matches_to_ips:
                            matches_to_ips[key] = []
                        matches_to_ips[key].append(ip_address)
                    for matches, ips in matches_to_ips.items():
                        print(f"\n\n{environment} {scan_type} servers " + ", ".join(ips) + " require the following patches")
                        for match in matches:
                            print(match)

if __name__ == '__main__':
    generate_vulns()
    write_output()
